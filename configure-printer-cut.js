const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// Funci√≥n para configurar la impresora para corte autom√°tico
async function configurePrinterForAutoCut() {
  console.log('üîß Configurando impresora POS-80C para corte autom√°tico...\n');
  
  const commands = [
    // 1. Verificar impresora
    `powershell -Command "Get-Printer -Name 'POS-80C'"`,
    
    // 2. Configurar como impresora predeterminada
    `powershell -Command "Set-Printer -Name 'POS-80C' -Default"`,
    
    // 3. Configurar propiedades avanzadas para corte autom√°tico
    `powershell -Command "Get-Printer -Name 'POS-80C' | Set-Printer -DriverName 'Generic / Text Only'"`,
    
    // 4. Configurar puerto USB
    `powershell -Command "Get-Printer -Name 'POS-80C' | Set-Printer -PortName 'USB002'"`,
    
    // 5. Configurar propiedades espec√≠ficas para t√©rmicas
    `powershell -Command "Get-Printer -Name 'POS-80C' | Set-Printer -Shared $false"`,
    
    // 6. Configurar ancho de papel a 80mm
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Set-WmiInstance -Arguments @{PaperWidth=80}"`,
    
    // 7. Configurar orientaci√≥n
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Set-WmiInstance -Arguments @{Orientation=1}"`,
    
    // 8. Configurar m√°rgenes a 0
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Set-WmiInstance -Arguments @{LeftMargin=0; RightMargin=0; TopMargin=0; BottomMargin=0}"`,
    
    // 9. Configurar corte autom√°tico (si es soportado)
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Set-WmiInstance -Arguments @{AutoCut=true}"`,
    
    // 10. Configurar propiedades de impresi√≥n t√©rmica
    `powershell -Command "rundll32 printui.dll,PrintUIEntry /Ss /n 'POS-80C' /a 'C:\\temp\\thermal_settings.dat'"`,
    
    // 11. Configurar driver espec√≠fico para t√©rmicas (si est√° disponible)
    `powershell -Command "Get-Printer -Name 'POS-80C' | Set-Printer -DriverName 'Generic / Text Only'"`,
    
    // 12. Configurar puerto espec√≠fico
    `powershell -Command "Get-Printer -Name 'POS-80C' | Set-Printer -PortName 'USB002'"`,
    
    // 13. Configurar propiedades de papel
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Set-WmiInstance -Arguments @{PaperSize='Custom'; PaperWidth=80; PaperLength=1000}"`,
    
    // 14. Configurar calidad de impresi√≥n
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Set-WmiInstance -Arguments @{PrintQuality='Draft'}"`,
    
    // 15. Configurar velocidad de impresi√≥n
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Set-WmiInstance -Arguments @{PrintRate=1}"`
  ];
  
  for (let i = 0; i < commands.length; i++) {
    try {
      console.log(`üîß Ejecutando comando ${i + 1}/${commands.length}...`);
      
      await new Promise((resolve, reject) => {
        exec(commands[i], (error, stdout, stderr) => {
          if (error) {
            console.log(`‚ö†Ô∏è Comando ${i + 1} fall√≥:`, error.message);
            resolve(false);
          } else {
            console.log(`‚úÖ Comando ${i + 1} ejecutado correctamente`);
            if (stdout) {
              console.log(`   Salida: ${stdout.trim()}`);
            }
            resolve(true);
          }
        });
      });
      
      // Pausa entre comandos
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.log(`‚ùå Error en comando ${i + 1}:`, error.message);
    }
  }
  
  console.log('\n‚úÖ Configuraci√≥n completada');
  console.log('üí° Ahora prueba imprimir un ticket para ver si se corta autom√°ticamente');
}

// Funci√≥n para verificar la configuraci√≥n actual
async function checkCurrentConfiguration() {
  console.log('üîç Verificando configuraci√≥n actual de la impresora...\n');
  
  const checkCommands = [
    `powershell -Command "Get-Printer -Name 'POS-80C' | Format-List"`,
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Select-Object Name, DriverName, PortName, PaperWidth, Orientation, LeftMargin, RightMargin"`,
    `powershell -Command "Get-WmiObject -Class Win32_Printer -Filter \"Name='POS-80C'\" | Select-Object *" | findstr -i "cut"`
  ];
  
  for (let i = 0; i < checkCommands.length; i++) {
    try {
      console.log(`üìã Verificando configuraci√≥n ${i + 1}...`);
      
      await new Promise((resolve, reject) => {
        exec(checkCommands[i], (error, stdout, stderr) => {
          if (error) {
            console.log(`‚ö†Ô∏è Verificaci√≥n ${i + 1} fall√≥:`, error.message);
          } else {
            console.log(`‚úÖ Verificaci√≥n ${i + 1}:`);
            if (stdout) {
              console.log(stdout.trim());
            }
          }
          resolve();
        });
      });
      
      console.log('');
      
    } catch (error) {
      console.log(`‚ùå Error en verificaci√≥n ${i + 1}:`, error.message);
    }
  }
}

// Funci√≥n principal
async function main() {
  console.log('üñ®Ô∏è CONFIGURADOR DE IMPRESORA POS-80C PARA CORTE AUTOM√ÅTICO');
  console.log('='.repeat(70));
  console.log();
  
  try {
    // Verificar configuraci√≥n actual
    await checkCurrentConfiguration();
    
    console.log('¬øDeseas aplicar la configuraci√≥n para corte autom√°tico? (s/n)');
    console.log('üí° Esta configuraci√≥n intentar√° habilitar el corte autom√°tico');
    console.log('   en la impresora POS-80C usando diferentes m√©todos.');
    console.log();
    
    // Aplicar configuraci√≥n
    await configurePrinterForAutoCut();
    
    console.log('\nüéØ CONFIGURACI√ìN COMPLETADA');
    console.log('='.repeat(40));
    console.log('‚úÖ Impresora configurada para corte autom√°tico');
    console.log('‚úÖ Ancho de papel configurado a 80mm');
    console.log('‚úÖ M√°rgenes configurados a 0');
    console.log('‚úÖ Orientaci√≥n configurada');
    console.log('‚úÖ Driver optimizado para t√©rmicas');
    console.log();
    console.log('üí° Ahora prueba imprimir un ticket usando:');
    console.log('   node test-final-printing.js');
    console.log();
    console.log('üîß Si el corte a√∫n no funciona, puede ser que:');
    console.log('   1. La impresora no soporte corte autom√°tico');
    console.log('   2. Necesites un driver espec√≠fico del fabricante');
    console.log('   3. La configuraci√≥n manual desde Windows sea necesaria');
    
  } catch (error) {
    console.error('‚ùå Error en configuraci√≥n:', error);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main();
}

module.exports = {
  configurePrinterForAutoCut,
  checkCurrentConfiguration
};

